import _styled from "@emotion/styled/base";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { OrderedMap } from 'immutable';
import { translate } from 'react-polyglot';
import { connect } from 'react-redux';
import { Dropdown, DropdownItem, StyledDropdownButton, Loader, lengths, components, shadows } from 'decap-cms-ui-default';
import { createNewEntry } from '../../actions/collections';
import { loadUnpublishedEntries, updateUnpublishedEntryStatus, publishUnpublishedEntry, deleteUnpublishedEntry } from '../../actions/editorialWorkflow';
import { selectUnpublishedEntriesByStatus } from '../../reducers';
import { EDITORIAL_WORKFLOW, status } from '../../constants/publishModes';
import WorkflowList from './WorkflowList';
import { jsx as ___EmotionJSX } from "@emotion/react";
const WorkflowContainer = /*#__PURE__*/_styled("div", {
  target: "e1t9l5ui4",
  label: "WorkflowContainer"
})("padding:", lengths.pageMargin, " 0;height:100vh;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRCb0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzT3BlbkF1dGhvcmluZyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaXNPcGVuQXV0aG9yaW5nPXtpc09wZW5BdXRob3Jpbmd9XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAvPlxuICAgICAgPC9Xb3JrZmxvd0NvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb25maWcsIGdsb2JhbFVJIH0gPSBzdGF0ZTtcbiAgY29uc3QgaXNFZGl0b3JpYWxXb3JrZmxvdyA9IGNvbmZpZy5wdWJsaXNoX21vZGUgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgaXNPcGVuQXV0aG9yaW5nID0gZ2xvYmFsVUkudXNlT3BlbkF1dGhvcmluZztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdywgaXNPcGVuQXV0aG9yaW5nIH07XG5cbiAgaWYgKGlzRWRpdG9yaWFsV29ya2Zsb3cpIHtcbiAgICByZXR1cm5PYmouaXNGZXRjaGluZyA9IHN0YXRlLmVkaXRvcmlhbFdvcmtmbG93LmdldEluKFsncGFnZXMnLCAnaXNGZXRjaGluZyddLCBmYWxzZSk7XG5cbiAgICAvKlxuICAgICAqIEdlbmVyYXRlcyBhbiBvcmRlcmVkIE1hcCBvZiB0aGUgYXZhaWxhYmxlIHN0YXR1cyBhcyBrZXlzLlxuICAgICAqIEVhY2gga2V5IGNvbnRhaW5pbmcgYSBTZXF1ZW5jZSBvZiBhdmFpbGFibGUgdW5wdWJobGlzaGVkIGVudHJpZXNcbiAgICAgKiBFZy46IE9yZGVyZWRNYXB7J2RyYWZ0JzpTZXEoKSwgJ3BlbmRpbmdfcmV2aWV3JzpTZXEoKSwgJ3BlbmRpbmdfcHVibGlzaCc6U2VxKCl9XG4gICAgICovXG4gICAgcmV0dXJuT2JqLnVucHVibGlzaGVkRW50cmllcyA9IHN0YXR1cy5yZWR1Y2UoKGFjYywgY3VyclN0YXR1cykgPT4ge1xuICAgICAgY29uc3QgZW50cmllcyA9IHNlbGVjdFVucHVibGlzaGVkRW50cmllc0J5U3RhdHVzKHN0YXRlLCBjdXJyU3RhdHVzKTtcbiAgICAgIHJldHVybiBhY2Muc2V0KGN1cnJTdGF0dXMsIGVudHJpZXMpO1xuICAgIH0sIE9yZGVyZWRNYXAoKSk7XG4gIH1cbiAgcmV0dXJuIHJldHVybk9iajtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIHtcbiAgbG9hZFVucHVibGlzaGVkRW50cmllcyxcbiAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gIGRlbGV0ZVVucHVibGlzaGVkRW50cnksXG59KSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
const WorkflowTop = /*#__PURE__*/_styled("div", {
  target: "e1t9l5ui3",
  label: "WorkflowTop"
})(components.cardTop, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlDOEIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzT3BlbkF1dGhvcmluZyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaXNPcGVuQXV0aG9yaW5nPXtpc09wZW5BdXRob3Jpbmd9XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAvPlxuICAgICAgPC9Xb3JrZmxvd0NvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb25maWcsIGdsb2JhbFVJIH0gPSBzdGF0ZTtcbiAgY29uc3QgaXNFZGl0b3JpYWxXb3JrZmxvdyA9IGNvbmZpZy5wdWJsaXNoX21vZGUgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgaXNPcGVuQXV0aG9yaW5nID0gZ2xvYmFsVUkudXNlT3BlbkF1dGhvcmluZztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdywgaXNPcGVuQXV0aG9yaW5nIH07XG5cbiAgaWYgKGlzRWRpdG9yaWFsV29ya2Zsb3cpIHtcbiAgICByZXR1cm5PYmouaXNGZXRjaGluZyA9IHN0YXRlLmVkaXRvcmlhbFdvcmtmbG93LmdldEluKFsncGFnZXMnLCAnaXNGZXRjaGluZyddLCBmYWxzZSk7XG5cbiAgICAvKlxuICAgICAqIEdlbmVyYXRlcyBhbiBvcmRlcmVkIE1hcCBvZiB0aGUgYXZhaWxhYmxlIHN0YXR1cyBhcyBrZXlzLlxuICAgICAqIEVhY2gga2V5IGNvbnRhaW5pbmcgYSBTZXF1ZW5jZSBvZiBhdmFpbGFibGUgdW5wdWJobGlzaGVkIGVudHJpZXNcbiAgICAgKiBFZy46IE9yZGVyZWRNYXB7J2RyYWZ0JzpTZXEoKSwgJ3BlbmRpbmdfcmV2aWV3JzpTZXEoKSwgJ3BlbmRpbmdfcHVibGlzaCc6U2VxKCl9XG4gICAgICovXG4gICAgcmV0dXJuT2JqLnVucHVibGlzaGVkRW50cmllcyA9IHN0YXR1cy5yZWR1Y2UoKGFjYywgY3VyclN0YXR1cykgPT4ge1xuICAgICAgY29uc3QgZW50cmllcyA9IHNlbGVjdFVucHVibGlzaGVkRW50cmllc0J5U3RhdHVzKHN0YXRlLCBjdXJyU3RhdHVzKTtcbiAgICAgIHJldHVybiBhY2Muc2V0KGN1cnJTdGF0dXMsIGVudHJpZXMpO1xuICAgIH0sIE9yZGVyZWRNYXAoKSk7XG4gIH1cbiAgcmV0dXJuIHJldHVybk9iajtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIHtcbiAgbG9hZFVucHVibGlzaGVkRW50cmllcyxcbiAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gIGRlbGV0ZVVucHVibGlzaGVkRW50cnksXG59KSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
const WorkflowTopRow = /*#__PURE__*/_styled("div", {
  target: "e1t9l5ui2",
  label: "WorkflowTopRow"
})("display:flex;justify-content:space-between;span[role='button']{", shadows.dropDeep, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFDaUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzT3BlbkF1dGhvcmluZyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaXNPcGVuQXV0aG9yaW5nPXtpc09wZW5BdXRob3Jpbmd9XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAvPlxuICAgICAgPC9Xb3JrZmxvd0NvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb25maWcsIGdsb2JhbFVJIH0gPSBzdGF0ZTtcbiAgY29uc3QgaXNFZGl0b3JpYWxXb3JrZmxvdyA9IGNvbmZpZy5wdWJsaXNoX21vZGUgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgaXNPcGVuQXV0aG9yaW5nID0gZ2xvYmFsVUkudXNlT3BlbkF1dGhvcmluZztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdywgaXNPcGVuQXV0aG9yaW5nIH07XG5cbiAgaWYgKGlzRWRpdG9yaWFsV29ya2Zsb3cpIHtcbiAgICByZXR1cm5PYmouaXNGZXRjaGluZyA9IHN0YXRlLmVkaXRvcmlhbFdvcmtmbG93LmdldEluKFsncGFnZXMnLCAnaXNGZXRjaGluZyddLCBmYWxzZSk7XG5cbiAgICAvKlxuICAgICAqIEdlbmVyYXRlcyBhbiBvcmRlcmVkIE1hcCBvZiB0aGUgYXZhaWxhYmxlIHN0YXR1cyBhcyBrZXlzLlxuICAgICAqIEVhY2gga2V5IGNvbnRhaW5pbmcgYSBTZXF1ZW5jZSBvZiBhdmFpbGFibGUgdW5wdWJobGlzaGVkIGVudHJpZXNcbiAgICAgKiBFZy46IE9yZGVyZWRNYXB7J2RyYWZ0JzpTZXEoKSwgJ3BlbmRpbmdfcmV2aWV3JzpTZXEoKSwgJ3BlbmRpbmdfcHVibGlzaCc6U2VxKCl9XG4gICAgICovXG4gICAgcmV0dXJuT2JqLnVucHVibGlzaGVkRW50cmllcyA9IHN0YXR1cy5yZWR1Y2UoKGFjYywgY3VyclN0YXR1cykgPT4ge1xuICAgICAgY29uc3QgZW50cmllcyA9IHNlbGVjdFVucHVibGlzaGVkRW50cmllc0J5U3RhdHVzKHN0YXRlLCBjdXJyU3RhdHVzKTtcbiAgICAgIHJldHVybiBhY2Muc2V0KGN1cnJTdGF0dXMsIGVudHJpZXMpO1xuICAgIH0sIE9yZGVyZWRNYXAoKSk7XG4gIH1cbiAgcmV0dXJuIHJldHVybk9iajtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIHtcbiAgbG9hZFVucHVibGlzaGVkRW50cmllcyxcbiAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gIGRlbGV0ZVVucHVibGlzaGVkRW50cnksXG59KSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
const WorkflowTopHeading = /*#__PURE__*/_styled("h1", {
  target: "e1t9l5ui1",
  label: "WorkflowTopHeading"
})(components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThDb0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzT3BlbkF1dGhvcmluZyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaXNPcGVuQXV0aG9yaW5nPXtpc09wZW5BdXRob3Jpbmd9XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAvPlxuICAgICAgPC9Xb3JrZmxvd0NvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb25maWcsIGdsb2JhbFVJIH0gPSBzdGF0ZTtcbiAgY29uc3QgaXNFZGl0b3JpYWxXb3JrZmxvdyA9IGNvbmZpZy5wdWJsaXNoX21vZGUgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgaXNPcGVuQXV0aG9yaW5nID0gZ2xvYmFsVUkudXNlT3BlbkF1dGhvcmluZztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdywgaXNPcGVuQXV0aG9yaW5nIH07XG5cbiAgaWYgKGlzRWRpdG9yaWFsV29ya2Zsb3cpIHtcbiAgICByZXR1cm5PYmouaXNGZXRjaGluZyA9IHN0YXRlLmVkaXRvcmlhbFdvcmtmbG93LmdldEluKFsncGFnZXMnLCAnaXNGZXRjaGluZyddLCBmYWxzZSk7XG5cbiAgICAvKlxuICAgICAqIEdlbmVyYXRlcyBhbiBvcmRlcmVkIE1hcCBvZiB0aGUgYXZhaWxhYmxlIHN0YXR1cyBhcyBrZXlzLlxuICAgICAqIEVhY2gga2V5IGNvbnRhaW5pbmcgYSBTZXF1ZW5jZSBvZiBhdmFpbGFibGUgdW5wdWJobGlzaGVkIGVudHJpZXNcbiAgICAgKiBFZy46IE9yZGVyZWRNYXB7J2RyYWZ0JzpTZXEoKSwgJ3BlbmRpbmdfcmV2aWV3JzpTZXEoKSwgJ3BlbmRpbmdfcHVibGlzaCc6U2VxKCl9XG4gICAgICovXG4gICAgcmV0dXJuT2JqLnVucHVibGlzaGVkRW50cmllcyA9IHN0YXR1cy5yZWR1Y2UoKGFjYywgY3VyclN0YXR1cykgPT4ge1xuICAgICAgY29uc3QgZW50cmllcyA9IHNlbGVjdFVucHVibGlzaGVkRW50cmllc0J5U3RhdHVzKHN0YXRlLCBjdXJyU3RhdHVzKTtcbiAgICAgIHJldHVybiBhY2Muc2V0KGN1cnJTdGF0dXMsIGVudHJpZXMpO1xuICAgIH0sIE9yZGVyZWRNYXAoKSk7XG4gIH1cbiAgcmV0dXJuIHJldHVybk9iajtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIHtcbiAgbG9hZFVucHVibGlzaGVkRW50cmllcyxcbiAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gIGRlbGV0ZVVucHVibGlzaGVkRW50cnksXG59KSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
const WorkflowTopDescription = /*#__PURE__*/_styled("p", {
  target: "e1t9l5ui0",
  label: "WorkflowTopDescription"
})(components.cardTopDescription, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtEdUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGNvbGxlY3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzKGNvbGxlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNFZGl0b3JpYWxXb3JrZmxvdyxcbiAgICAgIGlzT3BlbkF1dGhvcmluZyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICB1bnB1Ymxpc2hlZEVudHJpZXMsXG4gICAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICAgICAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gICAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFpc0VkaXRvcmlhbFdvcmtmbG93KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoaXNGZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgYWN0aXZlPnt0KCd3b3JrZmxvdy53b3JrZmxvdy5sb2FkaW5nJyl9PC9Mb2FkZXI+O1xuICAgIGNvbnN0IHJldmlld0NvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19yZXZpZXcnKS5zaXplO1xuICAgIGNvbnN0IHJlYWR5Q291bnQgPSB1bnB1Ymxpc2hlZEVudHJpZXMuZ2V0KCdwZW5kaW5nX3B1Ymxpc2gnKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxXb3JrZmxvd0NvbnRhaW5lcj5cbiAgICAgICAgPFdvcmtmbG93VG9wPlxuICAgICAgICAgIDxXb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICAgIDxXb3JrZmxvd1RvcEhlYWRpbmc+e3QoJ3dvcmtmbG93LndvcmtmbG93LndvcmtmbG93SGVhZGluZycpfTwvV29ya2Zsb3dUb3BIZWFkaW5nPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNjBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREcm9wZG93bkJ1dHRvbj57dCgnd29ya2Zsb3cud29ya2Zsb3cubmV3UG9zdCcpfTwvU3R5bGVkRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNyZWF0ZU5ld0VudHJ5KGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcFJvdz5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIHt0KCd3b3JrZmxvdy53b3JrZmxvdy5kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgc21hcnRfY291bnQ6IHJldmlld0NvdW50LFxuICAgICAgICAgICAgICByZWFkeUNvdW50LFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9Xb3JrZmxvd1RvcERlc2NyaXB0aW9uPlxuICAgICAgICA8L1dvcmtmbG93VG9wPlxuICAgICAgICA8V29ya2Zsb3dMaXN0XG4gICAgICAgICAgZW50cmllcz17dW5wdWJsaXNoZWRFbnRyaWVzfVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVN0YXR1cz17dXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1c31cbiAgICAgICAgICBoYW5kbGVQdWJsaXNoPXtwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeX1cbiAgICAgICAgICBoYW5kbGVEZWxldGU9e2RlbGV0ZVVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaXNPcGVuQXV0aG9yaW5nPXtpc09wZW5BdXRob3Jpbmd9XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAvPlxuICAgICAgPC9Xb3JrZmxvd0NvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb25maWcsIGdsb2JhbFVJIH0gPSBzdGF0ZTtcbiAgY29uc3QgaXNFZGl0b3JpYWxXb3JrZmxvdyA9IGNvbmZpZy5wdWJsaXNoX21vZGUgPT09IEVESVRPUklBTF9XT1JLRkxPVztcbiAgY29uc3QgaXNPcGVuQXV0aG9yaW5nID0gZ2xvYmFsVUkudXNlT3BlbkF1dGhvcmluZztcbiAgY29uc3QgcmV0dXJuT2JqID0geyBjb2xsZWN0aW9ucywgaXNFZGl0b3JpYWxXb3JrZmxvdywgaXNPcGVuQXV0aG9yaW5nIH07XG5cbiAgaWYgKGlzRWRpdG9yaWFsV29ya2Zsb3cpIHtcbiAgICByZXR1cm5PYmouaXNGZXRjaGluZyA9IHN0YXRlLmVkaXRvcmlhbFdvcmtmbG93LmdldEluKFsncGFnZXMnLCAnaXNGZXRjaGluZyddLCBmYWxzZSk7XG5cbiAgICAvKlxuICAgICAqIEdlbmVyYXRlcyBhbiBvcmRlcmVkIE1hcCBvZiB0aGUgYXZhaWxhYmxlIHN0YXR1cyBhcyBrZXlzLlxuICAgICAqIEVhY2gga2V5IGNvbnRhaW5pbmcgYSBTZXF1ZW5jZSBvZiBhdmFpbGFibGUgdW5wdWJobGlzaGVkIGVudHJpZXNcbiAgICAgKiBFZy46IE9yZGVyZWRNYXB7J2RyYWZ0JzpTZXEoKSwgJ3BlbmRpbmdfcmV2aWV3JzpTZXEoKSwgJ3BlbmRpbmdfcHVibGlzaCc6U2VxKCl9XG4gICAgICovXG4gICAgcmV0dXJuT2JqLnVucHVibGlzaGVkRW50cmllcyA9IHN0YXR1cy5yZWR1Y2UoKGFjYywgY3VyclN0YXR1cykgPT4ge1xuICAgICAgY29uc3QgZW50cmllcyA9IHNlbGVjdFVucHVibGlzaGVkRW50cmllc0J5U3RhdHVzKHN0YXRlLCBjdXJyU3RhdHVzKTtcbiAgICAgIHJldHVybiBhY2Muc2V0KGN1cnJTdGF0dXMsIGVudHJpZXMpO1xuICAgIH0sIE9yZGVyZWRNYXAoKSk7XG4gIH1cbiAgcmV0dXJuIHJldHVybk9iajtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIHtcbiAgbG9hZFVucHVibGlzaGVkRW50cmllcyxcbiAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgcHVibGlzaFVucHVibGlzaGVkRW50cnksXG4gIGRlbGV0ZVVucHVibGlzaGVkRW50cnksXG59KSh0cmFuc2xhdGUoKShXb3JrZmxvdykpO1xuIl19 */"));
class Workflow extends Component {
  componentDidMount() {
    const {
      loadUnpublishedEntries,
      isEditorialWorkflow,
      collections
    } = this.props;
    if (isEditorialWorkflow) {
      loadUnpublishedEntries(collections);
    }
  }
  render() {
    const {
      isEditorialWorkflow,
      isOpenAuthoring,
      isFetching,
      unpublishedEntries,
      updateUnpublishedEntryStatus,
      publishUnpublishedEntry,
      deleteUnpublishedEntry,
      collections,
      t
    } = this.props;
    if (!isEditorialWorkflow) return null;
    if (isFetching) return ___EmotionJSX(Loader, {
      active: true
    }, t('workflow.workflow.loading'));
    const reviewCount = unpublishedEntries.get('pending_review').size;
    const readyCount = unpublishedEntries.get('pending_publish').size;
    return ___EmotionJSX(WorkflowContainer, null, ___EmotionJSX(WorkflowTop, null, ___EmotionJSX(WorkflowTopRow, null, ___EmotionJSX(WorkflowTopHeading, null, t('workflow.workflow.workflowHeading')), ___EmotionJSX(Dropdown, {
      dropdownWidth: "160px",
      dropdownPosition: "left",
      dropdownTopOverlap: "40px",
      renderButton: () => ___EmotionJSX(StyledDropdownButton, null, t('workflow.workflow.newPost'))
    }, collections.filter(collection => collection.get('create')).toList().map(collection => ___EmotionJSX(DropdownItem, {
      key: collection.get('name'),
      label: collection.get('label'),
      onClick: () => createNewEntry(collection.get('name'))
    })))), ___EmotionJSX(WorkflowTopDescription, null, t('workflow.workflow.description', {
      smart_count: reviewCount,
      readyCount
    }))), ___EmotionJSX(WorkflowList, {
      entries: unpublishedEntries,
      handleChangeStatus: updateUnpublishedEntryStatus,
      handlePublish: publishUnpublishedEntry,
      handleDelete: deleteUnpublishedEntry,
      isOpenAuthoring: isOpenAuthoring,
      collections: collections
    }));
  }
}
_defineProperty(Workflow, "propTypes", {
  collections: ImmutablePropTypes.map.isRequired,
  isEditorialWorkflow: PropTypes.bool.isRequired,
  isOpenAuthoring: PropTypes.bool,
  isFetching: PropTypes.bool,
  unpublishedEntries: ImmutablePropTypes.map,
  loadUnpublishedEntries: PropTypes.func.isRequired,
  updateUnpublishedEntryStatus: PropTypes.func.isRequired,
  publishUnpublishedEntry: PropTypes.func.isRequired,
  deleteUnpublishedEntry: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
});
function mapStateToProps(state) {
  const {
    collections,
    config,
    globalUI
  } = state;
  const isEditorialWorkflow = config.publish_mode === EDITORIAL_WORKFLOW;
  const isOpenAuthoring = globalUI.useOpenAuthoring;
  const returnObj = {
    collections,
    isEditorialWorkflow,
    isOpenAuthoring
  };
  if (isEditorialWorkflow) {
    returnObj.isFetching = state.editorialWorkflow.getIn(['pages', 'isFetching'], false);

    /*
     * Generates an ordered Map of the available status as keys.
     * Each key containing a Sequence of available unpubhlished entries
     * Eg.: OrderedMap{'draft':Seq(), 'pending_review':Seq(), 'pending_publish':Seq()}
     */
    returnObj.unpublishedEntries = status.reduce((acc, currStatus) => {
      const entries = selectUnpublishedEntriesByStatus(state, currStatus);
      return acc.set(currStatus, entries);
    }, OrderedMap());
  }
  return returnObj;
}
export default connect(mapStateToProps, {
  loadUnpublishedEntries,
  updateUnpublishedEntryStatus,
  publishUnpublishedEntry,
  deleteUnpublishedEntry
})(translate()(Workflow));