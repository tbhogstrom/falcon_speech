import _styled from "@emotion/styled/base";
import _uniqueId from "lodash/uniqueId";
import _partial from "lodash/partial";
const _excluded = ["node"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import { bindActionCreators } from 'redux';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { translate } from 'react-polyglot';
import { ClassNames, Global, css as coreCss } from '@emotion/react';
import { connect } from 'react-redux';
import { FieldLabel, colors, transitions, lengths, borders } from 'decap-cms-ui-default';
import ReactMarkdown from 'react-markdown';
import gfm from 'remark-gfm';
import { resolveWidget, getEditorComponents } from '../../../lib/registry';
import { clearFieldErrors, tryLoadEntry, validateMetaField } from '../../../actions/entries';
import { addAsset, boundGetAsset } from '../../../actions/media';
import { selectIsLoadingAsset } from '../../../reducers/medias';
import { query, clearSearch } from '../../../actions/search';
import { openMediaLibrary, removeInsertedMedia, clearMediaControl, removeMediaControl, persistMedia } from '../../../actions/mediaLibrary';
import Widget from './Widget';

/**
 * This is a necessary bridge as we are still passing classnames to widgets
 * for styling. Once that changes we can stop storing raw style strings like
 * this.
 */
import { jsx as ___EmotionJSX } from "@emotion/react";
const styleStrings = {
  widget: `
    display: block;
    width: 100%;
    padding: ${lengths.inputPadding};
    margin: 0;
    border: ${borders.textField};
    border-radius: ${lengths.borderRadius};
    border-top-left-radius: 0;
    outline: 0;
    box-shadow: none;
    background-color: ${colors.inputBackground};
    color: #444a57;
    transition: border-color ${transitions.main};
    position: relative;
    font-size: 15px;
    line-height: 1.5;

    select& {
      text-indent: 14px;
      height: 58px;
    }
  `,
  widgetActive: `
    border-color: ${colors.active};
  `,
  widgetError: `
    border-color: ${colors.errorText};
  `,
  disabled: `
    pointer-events: none;
    opacity: 0.5;
  `,
  hidden: `
    visibility: hidden;
  `
};
const ControlContainer = /*#__PURE__*/_styled("div", {
  target: "ec1nk3l3",
  label: "ControlContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}"
} : {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ControlTopbar = /*#__PURE__*/_styled("div", {
  target: "ec1nk3l2",
  label: "ControlTopbar"
})(process.env.NODE_ENV === "production" ? {
  name: "hvtmtt",
  styles: "display:flex;justify-content:space-between;gap:20px;align-items:end"
} : {
  name: "hvtmtt",
  styles: "display:flex;justify-content:space-between;gap:20px;align-items:end",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ControlErrorsList = /*#__PURE__*/_styled("ul", {
  target: "ec1nk3l1",
  label: "ControlErrorsList"
})("list-style-type:none;font-size:12px;color:", colors.errorText, ";text-align:right;text-transform:uppercase;font-weight:600;margin:0;padding:2px 0 3px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const ControlHint = /*#__PURE__*/_styled("p", {
  target: "ec1nk3l0",
  label: "ControlHint"
})("margin-bottom:0;padding:6px 0 0;font-size:12px;color:", props => props.error ? colors.errorText : props.active ? colors.active : colors.controlLabel, ";transition:color ", transitions.main, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function LabelComponent({
  field,
  isActive,
  hasErrors,
  uniqueFieldId,
  isFieldOptional,
  t
}) {
  const label = `${field.get('label', field.get('name'))}`;
  const labelComponent = ___EmotionJSX(FieldLabel, {
    isActive: isActive,
    hasErrors: hasErrors,
    htmlFor: uniqueFieldId
  }, isFieldOptional ? ___EmotionJSX(React.Fragment, null, label, ___EmotionJSX("span", null, ` (${t('editor.editorControl.field.optional')})`)) : label);
  return labelComponent;
}
class EditorControl extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      activeLabel: false
    });
    _defineProperty(this, "uniqueFieldId", _uniqueId(`${this.props.field.get('name')}-field-`));
    _defineProperty(this, "isAncestorOfFieldError", () => {
      const {
        fieldsErrors
      } = this.props;
      if (fieldsErrors && fieldsErrors.size > 0) {
        return Object.values(fieldsErrors.toJS()).some(arr => arr.some(err => err.parentIds && err.parentIds.includes(this.uniqueFieldId)));
      }
      return false;
    });
  }
  render() {
    const {
      value,
      entry,
      collection,
      config,
      field,
      fieldsMetaData,
      fieldsErrors,
      mediaPaths,
      boundGetAsset,
      onChange,
      openMediaLibrary,
      clearMediaControl,
      removeMediaControl,
      addAsset,
      removeInsertedMedia,
      persistMedia,
      onValidate,
      controlRef,
      query,
      queryHits,
      isFetching,
      clearSearch,
      clearFieldErrors,
      loadEntry,
      className,
      isSelected,
      isEditorComponent,
      isNewEditorComponent,
      parentIds,
      t,
      validateMetaField,
      isLoadingAsset,
      isDisabled,
      isHidden,
      isFieldDuplicate,
      isFieldHidden,
      locale,
      isParentListCollapsed
    } = this.props;
    const widgetName = field.get('widget');
    const widget = resolveWidget(widgetName);
    const fieldName = field.get('name');
    const fieldHint = field.get('hint');
    const isFieldOptional = field.get('required') === false;
    const onValidateObject = onValidate;
    const metadata = fieldsMetaData && fieldsMetaData.get(fieldName);
    const errors = fieldsErrors && fieldsErrors.get(this.uniqueFieldId);
    const childErrors = this.isAncestorOfFieldError();
    const hasErrors = !!errors || childErrors;
    return ___EmotionJSX(ClassNames, null, ({
      css,
      cx
    }) => ___EmotionJSX(ControlContainer, {
      className: className,
      css: css`
              ${isHidden && styleStrings.hidden};
            `
    }, ___EmotionJSX(ControlTopbar, null, widget.globalStyles && ___EmotionJSX(Global, {
      styles: /*#__PURE__*/coreCss(widget.globalStyles, ";;label:EditorControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
    }), ___EmotionJSX(LabelComponent, {
      field: field,
      isActive: isSelected || this.state.styleActive,
      hasErrors: hasErrors,
      uniqueFieldId: this.uniqueFieldId,
      isFieldOptional: isFieldOptional,
      t: t
    }), errors && ___EmotionJSX(ControlErrorsList, null, errors.map(error => error.message && typeof error.message === 'string' && ___EmotionJSX("li", {
      key: error.message.trim().replace(/[^a-z0-9]+/gi, '-')
    }, error.message)))), ___EmotionJSX(Widget, {
      classNameWrapper: cx(css`
                  ${styleStrings.widget};
                `, {
        [css`
                    ${styleStrings.widgetActive};
                  `]: isSelected || this.state.styleActive
      }, {
        [css`
                    ${styleStrings.widgetError};
                  `]: hasErrors
      }, {
        [css`
                    ${styleStrings.disabled}
                  `]: isDisabled
      }),
      classNameWidget: css`
                ${styleStrings.widget};
              `,
      classNameWidgetActive: css`
                ${styleStrings.widgetActive};
              `,
      classNameLabel: css`
                ${styleStrings.label};
              `,
      classNameLabelActive: css`
                ${styleStrings.labelActive};
              `,
      controlComponent: widget.control,
      entry: entry,
      collection: collection,
      config: config,
      field: field,
      uniqueFieldId: this.uniqueFieldId,
      value: value,
      mediaPaths: mediaPaths,
      metadata: metadata,
      onChange: (newValue, newMetadata) => {
        onChange(field, newValue, newMetadata);
        clearFieldErrors(this.uniqueFieldId); // Видаляємо помилки лише для цього поля
      },
      onValidate: onValidate && _partial(onValidate, this.uniqueFieldId),
      onOpenMediaLibrary: openMediaLibrary,
      onClearMediaControl: clearMediaControl,
      onRemoveMediaControl: removeMediaControl,
      onRemoveInsertedMedia: removeInsertedMedia,
      onPersistMedia: persistMedia,
      onAddAsset: addAsset,
      getAsset: boundGetAsset,
      hasActiveStyle: isSelected || this.state.styleActive,
      setActiveStyle: () => this.setState({
        styleActive: true
      }),
      setInactiveStyle: () => this.setState({
        styleActive: false
      }),
      resolveWidget: resolveWidget,
      widget: widget,
      getEditorComponents: getEditorComponents,
      controlRef: controlRef,
      editorControl: ConnectedEditorControl,
      query: query,
      loadEntry: loadEntry,
      queryHits: queryHits[this.uniqueFieldId] || [],
      clearSearch: clearSearch,
      clearFieldErrors: clearFieldErrors,
      isFetching: isFetching,
      fieldsErrors: fieldsErrors,
      onValidateObject: onValidateObject,
      isEditorComponent: isEditorComponent,
      isNewEditorComponent: isNewEditorComponent,
      parentIds: parentIds,
      t: t,
      validateMetaField: validateMetaField,
      isDisabled: isDisabled,
      isFieldDuplicate: isFieldDuplicate,
      isFieldHidden: isFieldHidden,
      isLoadingAsset: isLoadingAsset,
      locale: locale,
      isParentListCollapsed: isParentListCollapsed
    }), fieldHint && ___EmotionJSX(ControlHint, {
      active: isSelected || this.state.styleActive,
      error: hasErrors
    }, ___EmotionJSX(ReactMarkdown, {
      remarkPlugins: [gfm],
      allowedElements: ['a', 'strong', 'em', 'del'],
      unwrapDisallowed: true,
      components: {
        // eslint-disable-next-line no-unused-vars
        a: _ref => {
          let {
              node
            } = _ref,
            props = _objectWithoutProperties(_ref, _excluded);
          return ___EmotionJSX("a", _extends({}, props, {
            target: "_blank",
            rel: "noopener noreferrer",
            style: {
              color: 'inherit'
            }
          }));
        }
      }
    }, fieldHint))));
  }
}
_defineProperty(EditorControl, "propTypes", {
  value: PropTypes.oneOfType([PropTypes.node, PropTypes.object, PropTypes.string, PropTypes.bool]),
  field: ImmutablePropTypes.map.isRequired,
  fieldsMetaData: ImmutablePropTypes.map,
  fieldsErrors: ImmutablePropTypes.map,
  mediaPaths: ImmutablePropTypes.map.isRequired,
  boundGetAsset: PropTypes.func.isRequired,
  onChange: PropTypes.func.isRequired,
  openMediaLibrary: PropTypes.func.isRequired,
  addAsset: PropTypes.func.isRequired,
  removeInsertedMedia: PropTypes.func.isRequired,
  persistMedia: PropTypes.func.isRequired,
  onValidate: PropTypes.func,
  controlRef: PropTypes.func,
  query: PropTypes.func.isRequired,
  queryHits: PropTypes.object,
  isFetching: PropTypes.bool,
  clearSearch: PropTypes.func.isRequired,
  clearFieldErrors: PropTypes.func.isRequired,
  loadEntry: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  isEditorComponent: PropTypes.bool,
  isNewEditorComponent: PropTypes.bool,
  parentIds: PropTypes.arrayOf(PropTypes.string),
  entry: ImmutablePropTypes.map.isRequired,
  collection: ImmutablePropTypes.map.isRequired,
  isDisabled: PropTypes.bool,
  isHidden: PropTypes.bool,
  isFieldDuplicate: PropTypes.func,
  isFieldHidden: PropTypes.func,
  locale: PropTypes.string,
  isParentListCollapsed: PropTypes.bool
});
_defineProperty(EditorControl, "defaultProps", {
  parentIds: []
});
function mapStateToProps(state) {
  const {
    collections,
    entryDraft
  } = state;
  const entry = entryDraft.get('entry');
  const collection = collections.get(entryDraft.getIn(['entry', 'collection']));
  const isLoadingAsset = selectIsLoadingAsset(state.medias);
  async function loadEntry(collectionName, slug) {
    const targetCollection = collections.get(collectionName);
    if (targetCollection) {
      const loadedEntry = await tryLoadEntry(state, targetCollection, slug);
      return loadedEntry;
    } else {
      throw new Error(`Can't find collection '${collectionName}'`);
    }
  }
  return {
    mediaPaths: state.mediaLibrary.get('controlMedia'),
    isFetching: state.search.isFetching,
    queryHits: state.search.queryHits,
    config: state.config,
    entry,
    collection,
    isLoadingAsset,
    loadEntry,
    validateMetaField: (field, value, t) => validateMetaField(state, collection, field, value, t)
  };
}
function mapDispatchToProps(dispatch) {
  const creators = bindActionCreators({
    openMediaLibrary,
    clearMediaControl,
    removeMediaControl,
    removeInsertedMedia,
    persistMedia,
    addAsset,
    query,
    clearSearch,
    clearFieldErrors
  }, dispatch);
  return _objectSpread(_objectSpread({}, creators), {}, {
    boundGetAsset: (collection, entry) => boundGetAsset(dispatch, collection, entry)
  });
}
function mergeProps(stateProps, dispatchProps, ownProps) {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, stateProps), dispatchProps), ownProps), {}, {
    boundGetAsset: dispatchProps.boundGetAsset(stateProps.collection, stateProps.entry)
  });
}
const ConnectedEditorControl = connect(mapStateToProps, mapDispatchToProps, mergeProps)(translate()(EditorControl));
export default ConnectedEditorControl;